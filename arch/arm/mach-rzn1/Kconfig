
config ARCH_RZN1
	bool "Renesas RZ/N1"
	select ARM_AMBA
	select USE_OF
	select ARCH_WANT_OPTIONAL_GPIOLIB
	select ARM_GIC
	select CPU_V7
	select USE_OF
	select PINCTRL
	select PINCTRL_RZN1
	select HAVE_SMP

config RZN1_CM3
	bool "Renesas RZ/N1 CM3 Firmware upload device"
	default n
	depends on ARCH_RZN1
	help
	  Utility driver that allows live upload of new CM3 firmware for the
	  R-IN engine processor. This driver *may* not work in case the system
	  is booted in NONSEC mode if the SRAM has been protected away.
	  Any firmware written to this device is copied to SRAM, and the CM3
	  is then reset. No support for 'safe shutdown' of the previous firmware
	  is done by this driver.
	  This driver at this stage is not recommended for production systems,
	  it is mostly useful for developing new CM3 firmwares.

config RZN1_A5PSW_WORKAROUND
	bool
	depends on ARCH_RZN1
	default RZN1_A5PSW_WORKAROUND_SEMAPHORE || RZN1_A5PSW_WORKAROUND_SPINLOCK

choice
	bool "Renesas RZ/N1 5-Port Switch workaround"
	default RZN1_A5PSW_WORKAROUND_SEMAPHORE
	depends on ARCH_RZN1
	optional
	help
	  Every access to the GMACs, the 5-port Switch and the RIN Engine must
	  be wrapped in a system-wide mutex to ensure that only one core,
	  including the Cortex M3, can access the registers at a time.
	  This is to allow writes to the 5-Port Switch to include a write to a
	  dummy register immediately before the real register write.

	  There are two implementation options: semaphore or spinlock.

config RZN1_A5PSW_WORKAROUND_SEMAPHORE
	bool "Semaphore"
	help
	  The system-wide mutex is implemented using the Semaphore hardware on
	  the RZ/N1 device. This option should be selected if the Cortex M3 is
	  active and accesses the switch registers.

config RZN1_A5PSW_WORKAROUND_SPINLOCK
	bool "Spinlock"
	help
	  The system-wide mutex is implemented using a linux kernel spinlock.
	  This only covers the Linux kernel, and therefore should only be
	  selected if the Cortex M3 is not accessing the switch.

endchoice
