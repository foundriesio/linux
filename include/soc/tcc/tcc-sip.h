/* SPDX-License-Identifier: GPL-2.0-or-later */
/*
 * Copyright (C) Telechips Inc.
 */

#ifndef SOC_TCC_SIP_H
#define SOC_TCC_SIP_H

#include <linux/arm-smccc.h>

/*
 * 8200_TXXX	: SMC Function ID Struct
 * [27:24] 2	: Service Call Range
 * [15:12] T	: Device Type
 * [11:00] XXX	: Sub Command
 */

#define SIP_CMD_TAG		(0x82000000UL)

#define IS_SIP_DEV(x)		(((x) & 0xFFFF0000UL) == SIP_CMD_TAG)
#define GET_SIP_DEV(x)		(((x) >> 12UL) & 0xFUL)
#define SIP_DEV(x)		(((x) & 0xFUL) << 12UL)

#define SIP_CMD(dev, cmd)	(SIP_CMD_TAG | SIP_DEV(dev) | ((cmd) & 0xFFFUL))

#define SMC_OK			(0UL)
#define SMC_UNK			(ULONG_MAX)

/* Device Type */
enum {
	SIP_DEV_CLK = 0,	/* 0x0 */
	SIP_DEV_WAKEUP,		/* 0x1 */
	SIP_DEV_WATCHDOG,	/* 0x2 */
	SIP_DEV_RESET,		/* 0x3 */
	SIP_DEV_REMOCON,	/* 0x4 */
	SIP_DEV_TCSB,		/* 0x5 */
	SIP_DEV_DRAM,		/* 0x6 */
	SIP_DEV_CHIP,		/* 0x7 */
	SIP_DEV_OPTEE,		/* 0x8 */
	SIP_DEV_RESERVED0,	/* 0x9: Reserved */
	SIP_DEV_RESERVED1,	/* 0xA: Reserved */
	SIP_DEV_RESERVED2,	/* 0xB: Reserved */
	SIP_DEV_RESERVED3,	/* 0xC: Reserved */
	SIP_DEV_CRYPTO,		/* 0xD */
	SIP_DEV_CORE,		/* 0xE */
	SIP_DEV_CORE_LEGACY,	/* 0xF: For compatibility with legacy f/w */
};

/* TCC SiP Service for Clock Driver */
enum {
	/* 0x8200_0000 */
	SIP_CLK_INIT = SIP_CMD(SIP_DEV_CLK, 0x000UL),
	SIP_CLK_SET_PLL,
	SIP_CLK_GET_PLL,
	SIP_CLK_SET_CLKCTRL,
	SIP_CLK_GET_CLKCTRL,
	SIP_CLK_ENABLE_CLKCTRL,
	SIP_CLK_DISABLE_CLKCTRL,
	SIP_CLK_IS_CLKCTRL,
	SIP_CLK_SET_PCLKCTRL,
	SIP_CLK_GET_PCLKCTRL,
	SIP_CLK_ENABLE_PERI,
	SIP_CLK_DISABLE_PERI,
	SIP_CLK_IS_PERI,
	SIP_CLK_ENABLE_DDIBUS,
	SIP_CLK_DISABLE_DDIBUS,
	SIP_CLK_IS_DDIBUS,
	SIP_CLK_RESET_DDIBUS,
	SIP_CLK_ENABLE_IOBUS,
	SIP_CLK_DISABLE_IOBUS,
	SIP_CLK_IS_IOBUS,
	SIP_CLK_RESET_IOBUS,
	SIP_CLK_ENABLE_HSIOBUS,
	SIP_CLK_DISABLE_HSIOBUS,
	SIP_CLK_IS_HSIOBUS,
	SIP_CLK_RESET_HSIOBUS,
	SIP_CLK_ENABLE_VPUBUS,
	SIP_CLK_DISABLE_VPUBUS,
	SIP_CLK_IS_VPUBUS,
	SIP_CLK_RESET_VPUBUS,
	SIP_CLK_ENABLE_ISODDI,
	SIP_CLK_DISABLE_ISODDI,
	SIP_CLK_IS_ISODDI,
	SIP_CLK_ENABLE_ISOTOP,
	SIP_CLK_DISABLE_ISOTOP,
	SIP_CLK_IS_ISOTOP,
	SIP_CLK_PWDN_DDIBUS,
	SIP_CLK_PWDN_IOBUS,
	SIP_CLK_PWDN_HSIOBUS,
	SIP_CLK_IS_PLL_ENABLED,
	SIP_CLK_SET_DPLL_CONFIG,
	SIP_CLK_SET_PCLKCTRL_DIV,
	SIP_CLK_SET_PCLKCTRL_DCO,
	SIP_CLK_SWRESET,
	SIP_CLK_ENABLE_CPUBUS,
	SIP_CLK_DISABLE_CPUBUS,
	SIP_CLK_RESET_CPUBUS,
	SIP_CLK_PWDN_CPUBUS,
	SIP_CLK_IS_CPUBUS,
};

/* TCC SiP Service for Wake-up */
enum {
	/* 0x8200_1000 */
	SIP_SET_WAKEUP_SRC = SIP_CMD(SIP_DEV_WAKEUP, 0x000UL),
	SIP_GET_WAKEUP_SRC,
	SIP_GET_WAKEUP_STS,
};

/* TCC SiP Service for Watchdog */
enum {
	/* 0x8200_2000 */
	SIP_WATCHDOG_SETUP = SIP_CMD(SIP_DEV_WATCHDOG, 0x000UL),
	SIP_WATCHDOG_START,
	SIP_WATCHDOG_STOP,
	SIP_WATCHDOG_PING,
	SIP_WATCHDOG_GET_STATUS,
	SIP_WATCHDOG_SETUP_IRQCNT,
};

/* TCC SiP Service for Reset */
enum {
	/* 0x8200_3000 */
	SIP_GET_RESET_REASON = SIP_CMD(SIP_DEV_RESET, 0x001UL),
	SIP_SET_RESET_REASON,
	SIP_GET_USER_DATA,
	SIP_SET_USER_DATA,
	SIP_GET_CORE_RESET_REASON,
};

/* TCC SiP Service for Remocon Driver */
enum {
	/* 0x8200_4000 */
	SIP_REMOCON_CFG = SIP_CMD(SIP_DEV_REMOCON, 0x000UL),
};

/* TCC SiP Service for telechips secure boot */
enum {
	/* 0x8200_5000 */
	SIP_TCSB_IMAGE_VERIFY = SIP_CMD(SIP_DEV_TCSB, 0x000UL),
	SIP_TCSB_OTP_WRITE,
	SIP_TCSB_JTAG_CLOSE,
	SIP_WRITE_OTP,
	SIP_READ_OTP,
	SIP_GET_OTP_CRC,
	SIP_GET_RAW_CRC,
	SIP_READ_OTP_FROM_IMAGE,
	SIP_READ_OTP_BY_IMAGE,
};

/* TCC SiP Service for DRAM */
enum {
	/* 0x8200_6000 */
	SIP_DRAM_TOOL_RDQS = SIP_CMD(SIP_DEV_DRAM, 0x000UL),
	SIP_DRAM_TOOL_WDQS,
	SIP_DRAM_TOOL_RDQSL,
	SIP_DRAM_TOOL_WDQSL,
	SIP_DRAM_TOOL_SVREF,
	SIP_DRAM_TOOL_DVREF,
	SIP_DRAM_TOOL_RIMP,
	SIP_DRAM_TOOL_WIMP,
	SIP_DRAM_TOOL_TM_INIT,
	SIP_DRAM_TOOL_TM_SET,
	SIP_DRAM_TOOL_CLK,
	SIP_DRAM_TOOL_CA,
	SIP_GET_DRAM_SIZE,
	SIP_DDR_ERROR_CNT,
	SIP_ECC_ERROR_REASON,
};

/* TCC SiP Service for chip info */
enum {
	/* 0x8200_7000 */
	SIP_CHIP_REV = SIP_CMD(SIP_DEV_CHIP, 0x000UL),
	SIP_CHIP_NAME,
	SIP_CHIP_ID,
	SIP_CHIP_ADD_BOOTTIME,
	SIP_CHIP_GET_BOOTTIME,
	SIP_CHIP_GET_BOOTTIME_NUM,
	SIP_CHIP_GET_BOOT_INFO,
};

#define tcc_sip_chip(id, ...) \
	(arm_smccc_smc((ulong)SIP_CHIP_##id, ##__VA_ARGS__))

/* SiP Service for OPTEE OTP area */
enum {
	/* 0x8200_8000 */
	SIP_OPTEE_READ_OTP = SIP_CMD(SIP_DEV_OPTEE, 0x000UL),
};

/* SiP Service for Crypto Engines */
enum {
	/* 0x8200_D000 */
	SIP_CRYPTO_TRNG = SIP_CMD(SIP_DEV_CRYPTO, 0x000UL),
	SIP_CRYPTO_CIPHER_OPEN,
	SIP_CRYPTO_CIPHER_CLOSE,
	SIP_CRYPTO_CIPHER_ALGORITHM,
	SIP_CRYPTO_CIPHER_IV,
	SIP_CRYPTO_CIPHER_KEY,
	SIP_CRYPTO_CIPHER_SET,
	SIP_CRYPTO_CIPHER_RUN,
};

/* SiP Service for CPU Core */
enum {
	/* 0x8200_E000 */
	SIP_CORE_EL2_AARCH64_TO_32 = SIP_CMD(SIP_DEV_CORE, 0x000UL),
	SIP_CORE_START_SUBCORE,
	SIP_CORE_END_SUBCORE,
};

/* SiP Service for CPU Core (Legacy) */
enum {
	/* 0x8200_F000 */
	SIP_POST_CORE_RESET = SIP_CMD(SIP_DEV_CORE_LEGACY, 0x001UL),
};

#endif /* SOC_TCC_SIP_H */
