
config EVL_SCHED_QUOTA
	bool "Enable quota-based scheduling"
	default n
	help
	This option enables the SCHED_QUOTA scheduling policy in the
	EVL core.

	This policy enforces a limitation on the CPU consumption of
	threads over a globally defined period, known as the quota
	interval. This is done by pooling threads with common
	requirements in groups, and giving each group a share of the
	global period.

	If in doubt, say N.

config EVL_RUNSTATS
	bool "Collect runtime statistics"
	default y
	help
	This option causes the EVL core to collect various
	per-thread runtime statistics, which are accessible via
	the /sys interface.

menu "Fixed sizes and limits"

config EVL_COREMEM_SIZE
	int "Size of core memory heap (Kb)"
	default 2048
	help
	The core heap is used for various internal allocations by
	the EVL core. The size is expressed in Kilobytes.

config EVL_NR_THREADS
	int "Maximum number of threads"
	range 1 4096
	default 128
	help

	The maximum number of user-space threads attached to the
	EVL core which can run concurrently in the system.

config EVL_NR_MONITORS
	int "Maximum number of monitors"
	range 1 16384
	default 512
	help

	The monitor is the fundamental synchronization element
	implemented by the EVL core, which can underpin any other
	synchronization mechanism. This value gives the maximum number
	of monitors which can be alive concurrently in the system.

config EVL_NR_CLOCKS
	int "Maximum number of clocks"
	range 1 16384
	default 8
	help

	This value gives the maximum number of semaphores which can be
	alive concurrently in the system for user-space applications.

config EVL_NR_XBUFS
	int "Maximum number of x-buffers"
	range 1 16384
	default 16
	help

	This value gives the maximum number of x-buffers which can be
	alive concurrently in the system for user-space applications.

config EVL_NR_PROXIES
	int "Maximum number of proxies"
	range 1 16384
	default 64
	help

	This value gives the maximum number of file proxies which can
	be alive concurrently in the system for user-space
	applications.

endmenu

menu "Pre-calibrated latency"

config EVL_LATENCY_USER
	int "User scheduling latency (ns)"
	default 0
	help
	The user scheduling latency is the time between the
	termination of an interrupt handler and the execution of the
	first instruction of the application thread this
	handler resumes. A default value of 0 (recommended) will cause
	a pre-calibrated value to be used.

	If the latmus driver is enabled, this value will be used as the
	factory default when running "latmus --reset".

config EVL_LATENCY_KERNEL
	int "Intra-kernel scheduling latency (ns)"
	default 0
	help
	The intra-kernel scheduling latency is the time between the
	termination of an interrupt handler and the execution of the
	first instruction of the EVL kthread this handler
	resumes. A default value of 0 (recommended) will cause a
	pre-calibrated value to be used.

	Intra-kernel latency is usually significantly lower than user
	scheduling latency on MMU-enabled platforms, due to CPU cache
	latency.

	If the auto-tuner is enabled, this value will be used as the
	factory default when running "autotune --reset".

config EVL_LATENCY_IRQ
	int "Interrupt latency (ns)"
	default 0
	help
	The interrupt latency is the time between the occurrence of an
	IRQ and the first instruction of the interrupt handler which
	will service it. A default value of 0 (recommended) will cause
	a pre-calibrated value to be used.

	If the auto-tuner is enabled, this value will be used as the
	factory default when running "autotune --reset".

endmenu

menuconfig EVL_DEBUG
	bool "Debug support"
	help
	  When enabled, various debugging features can be switched
	  on. They can help to find problems in applications, drivers,
	  and the EVL core. EVL_DEBUG by itself does not have
	  any impact on the generated code.

if EVL_DEBUG

config EVL_DEBUG_CORE
	bool "Core runtime assertions"
	help
	  This option activates various assertions inside the EVL
	  core. This option has limited overhead.

config EVL_DEBUG_MEMORY
	bool "Memory checks"
	help
	  This option enables memory debug checks inside the EVL
	  core. This option may induce significant overhead with large
	  heaps.

config EVL_DEBUG_USER
	bool "User consistency checks"
	help
	  This option enables a set of consistency checks for
	  detecting wrong runtime behavior in user applications.
	  Some of these runtime checks may induce overhead, enable
	  them for debugging purposes only.

if EVL_DEBUG_USER

config EVL_DEBUG_MUTEX_INBAND
       bool "Detect in-band mutex owner"
       default y
       help
         A thread which attempts to acquire a mutex currently locked by
         another thread running in-band may experience unwanted latency
         due to priority inversion.  This switch enables debug
         notifications sending a SIGDEBUG signal to the lock owner.

	 This option may add overhead to out-of-band execution over
	 contented locks.

config EVL_DEBUG_MUTEX_SLEEP
       bool "Detect sleeping while holding a mutex"
       default y
       help
         A thread which goes sleeping while holding a mutex is prone
         to cause unwanted latency to other threads serialized by
         the same lock. If debug notifications are enabled for such
         thread, it receives a SIGDEBUG signal right before entering
	 sleep.

	 This option has noticeable overhead for out-of-band threads
	 as it disables the normal fast locking operations from
	 user-space, causing a system call for each monitor enter/exit
	 operation.

endif # EVL_DEBUG_USER

config EVL_WATCHDOG
	bool "Watchdog support"
	default y
	help
	  This option activates a watchdog aimed at detecting runaway
	  EVL threads. If enabled, the watchdog triggers after a
	  given period of uninterrupted out-of-band activity has elapsed
	  without Linux interaction in the meantime.

	  In such an event, the current thread is moved out the
	  out-of-band context, receiving a SIGDEBUG signal from the
	  Linux kernel immediately after.

	  The timeout value of the watchdog can be set using the
	  EVL_WATCHDOG_TIMEOUT parameter.

config EVL_WATCHDOG_TIMEOUT
	depends on EVL_WATCHDOG
	int "Watchdog timeout"
	default 4
	range 1 60
	help
	  Watchdog timeout value (in seconds).

endif # EVL_DEBUG
