/* linux/drivers/char/tcc_hsm.h
 *
 * Copyright (C) 2009, 2010 Telechips, Inc.
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef TCC_HSM_H
#define TCC_HSM_H

#define TCCHSM_DEVICE_NAME ("tcc_hsm")

enum tcc_hsm_ioctl_obj_id_aes {
	OID_AES_ENCRYPT = 0x00000000,
	OID_AES_DECRYPT = 0x01000000,
	OID_AES_ECB_128 = 0x00100008,
	OID_AES_ECB_192 = 0x00180008,
	OID_AES_ECB_256 = 0x00200008,
	OID_AES_CBC_128 = 0x00100108,
	OID_AES_CBC_192 = 0x00180108,
	OID_AES_CBC_256 = 0x00200108,
	OID_AES_CTR_128 = 0x00100208,
	OID_AES_CTR_192 = 0x00180208,
	OID_AES_CTR_256 = 0x00200208,
	OID_AES_XTS_128 = 0x00100308,
	OID_AES_XTS_256 = 0x00200308,
	OID_AES_CCM_128 = 0x00101008,
	OID_AES_CCM_192 = 0x00181008,
	OID_AES_CCM_256 = 0x00201008,
	OID_AES_GCM_128 = 0x00101108,
	OID_AES_GCM_192 = 0x00181108,
	OID_AES_GCM_256 = 0x00201108,
};

enum tcc_hsm_ioctl_obj_id_sm4 {
	OID_SM4_ENCRYPT = 0x00000000,
	OID_SM4_DECRYPT = 0x01000000,
	OID_SM4_ECB_128 = 0x00100008,
	OID_SM4_CBC_128 = 0x00100108,
};

enum tcc_hsm_ioctl_obj_id_hmac {
	OID_HMAC_SHA1_160 = 0x00011100,
	OID_HMAC_SHA2_224 = 0x00012200,
	OID_HMAC_SHA2_256 = 0x00012300,
	OID_HMAC_SHA2_384 = 0x00012400,
	OID_HMAC_SHA2_512 = 0x00012500,
	OID_HMAC_SHA3_224 = 0x00013200,
	OID_HMAC_SHA3_256 = 0x00013300,
	OID_HMAC_SHA3_384 = 0x00013400,
	OID_HMAC_SHA3_512 = 0x00013500,
};

enum tcc_hsm_ioctl_obj_id_hash {
	OID_SHA1_160 = 0x00001100,
	OID_SHA2_224 = 0x00002200,
	OID_SHA2_256 = 0x00002300,
	OID_SHA2_384 = 0x00002400,
	OID_SHA2_512 = 0x00002500,
	OID_SHA3_224 = 0x00003200,
	OID_SHA3_256 = 0x00003300,
	OID_SHA3_384 = 0x00003400,
	OID_SHA3_512 = 0x00003500,
	OID_SM3_256 = 0x01002300,
};

enum tcc_hsm_ioctl_obj_id_ecc {
	OID_ECC_P256 = 0x00000013,
	OID_ECC_P384 = 0x00000014,
	OID_ECC_P521 = 0x00000015,
	OID_ECC_BP256 = 0x00000053,
	OID_ECC_BP384 = 0x00000054,
	OID_ECC_BP512 = 0x00000055,
	OID_SM2_256_SM3_256 = 0x010023A3,
};

#define HSM_IOCTL_MAGIC (0x48U)
#define HSM_SET_KEY_FROM_OTP_CMD (_IOWR(HSM_IOCTL_MAGIC, 0U, uint32_t))
#define HSM_SET_KEY_FROM_SNOR_CMD (_IOWR(HSM_IOCTL_MAGIC, 1U, uint32_t))
#define HSM_RUN_AES_CMD (_IOWR(HSM_IOCTL_MAGIC, 2U, uint32_t))
#define HSM_RUN_AES_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 3U, uint32_t))
#define HSM_RUN_SM4_CMD (_IOWR(HSM_IOCTL_MAGIC, 4U, uint32_t))
#define HSM_RUN_SM4_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 5U, uint32_t))
#define HSM_GEN_CMAC_VERIFY_CMD (_IOWR(HSM_IOCTL_MAGIC, 6U, uint32_t))
#define HSM_GEN_CMAC_VERIFY_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 7U, uint32_t))
#define HSM_GEN_GMAC_CMD (_IOWR(HSM_IOCTL_MAGIC, 8U, uint32_t))
#define HSM_GEN_GMAC_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 9U, uint32_t))
#define HSM_GEN_HMAC_CMD (_IOWR(HSM_IOCTL_MAGIC, 10U, uint32_t))
#define HSM_GEN_HMAC_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 11U, uint32_t))
#define HSM_GEN_SM3_HMAC_CMD (_IOWR(HSM_IOCTL_MAGIC, 12U, uint32_t))
#define HSM_GEN_SM3_HMAC_BY_KT_CMD (_IOWR(HSM_IOCTL_MAGIC, 13U, uint32_t))
#define HSM_GEN_SHA_CMD (_IOWR(HSM_IOCTL_MAGIC, 14U, uint32_t))
#define HSM_GEN_SM3_CMD (_IOWR(HSM_IOCTL_MAGIC, 15U, uint32_t))
#define HSM_RUN_ECDSA_SIGN_CMD (_IOWR(HSM_IOCTL_MAGIC, 16U, uint32_t))
#define HSM_RUN_ECDSA_VERIFY_CMD (_IOWR(HSM_IOCTL_MAGIC, 17U, uint32_t))
#define HSM_RUN_RSASSA_PKCS_SIGN_CMD (_IOWR(HSM_IOCTL_MAGIC, 18U, uint32_t))
#define HSM_RUN_RSASSA_PKCS_VERIFY_CMD (_IOWR(HSM_IOCTL_MAGIC, 19U, uint32_t))
#define HSM_RUN_RSASSA_PSS_SIGN_CMD (_IOWR(HSM_IOCTL_MAGIC, 20U, uint32_t))
#define HSM_RUN_RSASSA_PSS_VERIFY_CMD (_IOWR(HSM_IOCTL_MAGIC, 21U, uint32_t))
#define HSM_GET_RNG_CMD (_IOWR(HSM_IOCTL_MAGIC, 22U, uint32_t))
#define HSM_WRITE_OTP_CMD (_IOWR(HSM_IOCTL_MAGIC, 23U, uint32_t))
#define HSM_WRITE_SNOR_CMD (_IOWR(HSM_IOCTL_MAGIC, 24U, uint32_t))
#define HSM_GET_VER_CMD (_IOWR(HSM_IOCTL_MAGIC, 25U, uint32_t))
#define HSM_RUN_ECDH_PUBKEY_COMPUTE_CMD (_IOWR(HSM_IOCTL_MAGIC, 26U, uint32_t))
#define HSM_RUN_ECDH_PHASE_I_CMD (_IOWR(HSM_IOCTL_MAGIC, 27U, uint32_t))
#define HSM_RUN_ECDH_PHASE_II_CMD (_IOWR(HSM_IOCTL_MAGIC, 28U, uint32_t))

#endif /* TCC_HSM_H */
