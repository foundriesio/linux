// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * Copyright (C) Telechips Inc.
 */

#ifndef __TCC_ISP_SETTINGS_H__
#define __TCC_ISP_SETTINGS_H__

#include "tcc-isp.h"

/*
 * To use ISP UART,
 * enable "USE_ISP_UART" define and pinctl properties of isp device node in
 * device tree
 *
 * TCC8059 does not have an ball out of ISP UART.
 * TCC8050/53 has an ball out of ISP UART. Refer to the GPIO pins below.
 * UART TX - GPIO_MB[0] / GPIO_MB[6] / GPIO_MB[12] / GPIO_MB[24]
 * UART RX - GPIO_MB[1] / GPIO_MB[7] / GPIO_MB[13] / GPIO_MB[25]
 * But, GPIO pins above is used for other purpose.
 * So, H/W modification is needed to use ISP UART on the TCC8050/53 EVB.
 * Refer to the TCS(CV8050C-606)
 */
//#define USE_ISP_UART

/* decompanding mode(input 12bits, output 20bits) */
const struct hdr_state setting_hdr0 = {
	.mode				= HDR_MODE_COMPANDING,

	.decompanding			= DCPD_CTL_DCPD_EN_ENABLE,
	.decompanding_curve_maxval	= 7,
	.decompanding_input_bit		= DCPD_CTL_IN_BIT_SEL_12BITS,
	.decompanding_output_bit	= DCPD_CTL_OUT_BIT_SEL_20BITS,

	.dcpd_cur_gain[0]		= 0x0002,
	.dcpd_cur_gain[1]		= 0x0040,
	.dcpd_cur_gain[2]		= 0x03ff,
	.dcpd_cur_gain[3]		= 0x03ff,
	.dcpd_cur_gain[4]		= 0x03ff,
	.dcpd_cur_gain[5]		= 0x03ff,
	.dcpd_cur_gain[6]		= 0x03ff,
	.dcpd_cur_gain[7]		= 0x03ff,

	.dcpd_cur_x_axis[0]		= 0x0200,
	.dcpd_cur_x_axis[1]		= 0x02f8,
	.dcpd_cur_x_axis[2]		= 0x03e8,
	.dcpd_cur_x_axis[3]		= 0x03ff,
	.dcpd_cur_x_axis[4]		= 0x03ff,
	.dcpd_cur_x_axis[5]		= 0x03ff,
	.dcpd_cur_x_axis[6]		= 0x03ff,
	.dcpd_cur_x_axis[7]		= 0x03ff,
};

/* setting values(isp and adaptive_data are from btree) */
const struct reg_setting setting_isp0[] = {
	/* sample setting for ar0147 */
	/* order, ssd size control... */
	{0x1200, 0x00c12c4E},
	{0x1204, 0x07080000},

	/* bayer channel gain... */
	{0x1300, 0x00f10007},
	{0x1304, 0x00070007},
	{0x1308, 0x00070041},
	{0x130c, 0x00410041},
	{0x1310, 0x00410000},

	/* rgb ae gain... */
	{0x1500, 0x00010100},

	/* bayer curve... */
	{0x1800, 0x0001000E},
	{0x1804, 0x002F0068},
	{0x1808, 0x00C50140},
	{0x180c, 0x019401D4},
	{0x1810, 0x02090238},
	{0x1814, 0x0262028A},
	{0x1818, 0x02AD02E9},
	{0x181c, 0x0318033C},
	{0x1820, 0x035C0396},
	{0x1824, 0x03C003E8},
	{0x1828, 0x03FF0000},

	/* shading correction... */
	{0x1900, 0x0c000021},
	{0x1904, 0x00400033},
	{0x1908, 0x03800000},
	{0x7000, 0x00644677},
	{0x7004, 0x005E7607},
	{0x7008, 0x005034EE},
	{0x700c, 0x0049248D},
	{0x7010, 0x004A649F},
	{0x7014, 0x005004EB},
	{0x7018, 0x005FE5E4},
	{0x701c, 0x00663653},
	{0x7020, 0x006AD6FB},
	{0x7024, 0x0055F571},
	{0x7028, 0x00495490},
	{0x702c, 0x0044043E},
	{0x7030, 0x00444441},
	{0x7034, 0x0049548D},
	{0x7038, 0x00569562},
	{0x703c, 0x006D66D1},
	{0x7040, 0x005BE63A},
	{0x7044, 0x004E5503},
	{0x7048, 0x00441448},
	{0x704c, 0x00400400},
	{0x7050, 0x00400400},
	{0x7054, 0x00444446},
	{0x7058, 0x004D4500},
	{0x705c, 0x005CF636},
	{0x7060, 0x00614640},
	{0x7064, 0x004FA503},
	{0x7068, 0x0044A446},
	{0x706c, 0x00400400},
	{0x7070, 0x00400400},
	{0x7074, 0x0044A441},
	{0x7078, 0x005004FA},
	{0x707c, 0x0062C62C},
	{0x7080, 0x00687727},
	{0x7084, 0x0054957B},
	{0x7088, 0x0048148D},
	{0x708c, 0x0042D43E},
	{0x7090, 0x0042D43B},
	{0x7094, 0x00470486},
	{0x7098, 0x00539571},
	{0x709c, 0x00698713},
	{0x70a0, 0x0064E69D},
	{0x70a4, 0x005F0623},
	{0x70a8, 0x004FD4EB},
	{0x70ac, 0x0049748D},
	{0x70b0, 0x0048B490},
	{0x70b4, 0x004E24DD},
	{0x70b8, 0x005F0614},
	{0x70bc, 0x0065D68C},
	{0x70c0, 0x00644654},
	{0x70c4, 0x006125E0},
	{0x70c8, 0x005034ED},
	{0x70cc, 0x004D4491},
	{0x70d0, 0x005074A8},
	{0x70d4, 0x005004E2},
	{0x70d8, 0x00623608},
	{0x70dc, 0x0069867E},
	{0x70e0, 0x006EB6DD},
	{0x70e4, 0x0059D56B},
	{0x70e8, 0x004D4494},
	{0x70ec, 0x0045F440},
	{0x70f0, 0x00470446},
	{0x70f4, 0x004C448F},
	{0x70f8, 0x005AE572},
	{0x70fc, 0x0073F701},
	{0x7100, 0x006CA659},
	{0x7104, 0x00549511},
	{0x7108, 0x0047044E},
	{0x710c, 0x00400400},
	{0x7110, 0x00400400},
	{0x7114, 0x0047044E},
	{0x7118, 0x00549505},
	{0x711c, 0x006A8632},
	{0x7120, 0x00655645},
	{0x7124, 0x00539507},
	{0x7128, 0x0046E44A},
	{0x712c, 0x00400400},
	{0x7130, 0x00400400},
	{0x7134, 0x0045344A},
	{0x7138, 0x0053950E},
	{0x713c, 0x00676659},
	{0x7140, 0x0073F6E3},
	{0x7144, 0x005CF56F},
	{0x7148, 0x004F6497},
	{0x714c, 0x00481441},
	{0x7150, 0x004A243B},
	{0x7154, 0x004E548F},
	{0x7158, 0x005CF56B},
	{0x715c, 0x007506E9},
	{0x7160, 0x0064E668},
	{0x7164, 0x006235FA},
	{0x7168, 0x004FD4FC},
	{0x716c, 0x00528497},
	{0x7170, 0x0055A485},
	{0x7174, 0x004E24E7},
	{0x7178, 0x006235E5},
	{0x717c, 0x0068765E},
	{0x1900, 0x0c010001},

	/* dpc... */
	{0x1a00, 0x00010000},

	/* gbgr... */
	{0x1a10, 0x00010000},
	{0x1a14, 0x00000000},

	/* pre-bayer nr... */
	{0x1a30, 0x00017080},
	{0x1a34, 0x10500000},

	/* post-bayer nr... */
	{0x1a80, 0x00033020},
	{0x1a84, 0x80ff2040},
	{0x1a88, 0x0010e0ff},
	{0x1a8c, 0x70a00020},

	/* rgb nr... */
	{0x2000, 0x00073020},
	{0x2004, 0x20010080},
	{0x2008, 0x00101010},
	{0x200c, 0x0f0f0f0f},
	{0x2010, 0x000f0303},
	{0x2014, 0x02030001},

	/* y nr... */
	{0x2070, 0x0301FF00},
	{0x2074, 0x00100f08},
	{0x2078, 0x08080808},
	{0x207c, 0x08080808},
	{0x2080, 0x08080808},
	{0x2084, 0x08080808},
	{0x2088, 0x1000004b},

	/* c nr... */
	{0x20b8, 0x030F0003},
	{0x20bc, 0x1F08FF00},
	{0x20c0, 0x00230508},
	{0x20c4, 0x04040404},
	{0x20c8, 0x03030303},

	/* pre-bayer sharpness... */
	{0x1a50, 0x00031014},
	{0x1a54, 0x00180400},
	{0x1a58, 0x3a0F0010},
	{0x1a5c, 0x00000000},

	/* post-bayer sharpness... */
	{0x1ab0, 0x0f011810},
	{0x1ab4, 0x04002d0c},
	{0x1ab8, 0x00c80000},

	/* rgb sharpness... */
	{0x2040, 0x3f010609},
	{0x2044, 0x00180000},
	{0x2048, 0x40404040},
	{0x204c, 0x00404040},
	{0x2050, 0x40400040},
	{0x2054, 0x207f0000},

	/* y sharpness... */
	{0x20e0, 0x3f010003},
	{0x20e4, 0x04044020},
	{0x20e8, 0x6050384b},
	{0x20ec, 0x20308080},
	{0x20f0, 0x80800080},
	{0x20f4, 0x007f0000},

	/* rgb color correction matrix... */
	{0x2500, 0x007F0180},
	{0x2504, 0x0066001A},
	{0x2508, 0x00660180},
	{0x250c, 0x001A0034},
	{0x2510, 0x004C0180},
	{0x2514, 0x00030002},
	{0x2518, 0x00560000},

	/* yuv saturation control... */
	{0x2600, 0x0001006E},
	{0x2604, 0x00502b24},
	{0x2608, 0x3630403c},
	{0x260c, 0x00000103},

	/* y contrast control... */
	{0x20a8, 0x00012020},
	{0x20ac, 0x00000000},

	/* rgb multi-color enhancement... */
	{0x2700, 0x000F0000},
	{0x2704, 0x00000000},
	{0x2708, 0x00000000},
	{0x270c, 0x00000000},
	{0x2710, 0x00000000},
	{0x2714, 0x00000000},
	{0x2718, 0x00000000},
	{0x271c, 0x00000000},
	{0x2720, 0x00000000},
	{0x2724, 0x00000003},
	{0x2728, 0xFF01801e},

	/* dcpd... */
	{0x1860, 0x07630002},
	{0x1864, 0x004003FF},
	{0x1868, 0x03FF03FF},
	{0x186c, 0x03FF03FF},
	{0x1870, 0x03ff0200},
	{0x1874, 0x02F803E8},
	{0x1878, 0x03FF03FF},
	{0x187c, 0x03FF03FF},
	{0x1880, 0x03ff0000},

	/* tone mapping... */
	{0x2810, 0x0400040E},
	{0x2814, 0x400a0000},
	{0x2818, 0x00000000},
	{0x281c, 0x00000000},
	{0x2820, 0x00000000},
	{0x2824, 0x00640352},
	{0x2828, 0x03ff03ff},
	{0x282c, 0x03ff03ff},
	{0x2830, 0x03ff03ff},
	{0x2834, 0x03ff03ff},
	{0x2838, 0x03ff0000},
	{0x283c, 0x00000000},
	{0x2840, 0x00640096},
	{0x2844, 0x019003ff},
	{0x2848, 0x03ff03ff},
	{0x284c, 0x02000000},
	{0x2850, 0x000000ff},
	{0x2854, 0x00000064},
	{0x2858, 0x01400320},
	{0x285c, 0x03ff03ff},
	{0x2860, 0x03ff03ff},
	{0x2864, 0x03ff0000},
	{0x2868, 0x00000000},
	{0x286c, 0x00000200},
	{0x2870, 0x03ff0460},
	{0x2874, 0x0784043f},
	{0x2878, 0xca800000},
	{0x287c, 0x05100330},
	{0x2880, 0x00004100},
	{0x2810, 0x0401048E},

	/* contrast enhancement... */
	{0x2900, 0x00070001},
	{0x2904, 0x00800000},
	{0x2908, 0x0080000a},
	{0x290c, 0x00ff0020},
	{0x2910, 0x000000ff},
	{0x2914, 0x00000020},
	{0x2918, 0x00040010},
	{0x291c, 0x00100003},
	{0x2920, 0x00c40040},
	{0x2924, 0x0510032E},

	/* wb gain... */
	{0x1400, 0x0001017c},
	{0x1404, 0x010001ae},
};

/*
 * setting values below are used to set ISP0 ~ 3.
 * If the setting value is different for each ISP,
 * make setting_xxx structure and change below structure's member initialization
 */
const struct hdr_state *hdr_value[4] = {
	&setting_hdr0,	/* FOR ISP0 */
	&setting_hdr0,	/* FOR ISP1 */
	&setting_hdr0,	/* FOR ISP2 */
	&setting_hdr0,	/* FOR ISP3 */
};

const struct isp_tune tune_value[4] = {
	/* FOR ISP0 */
	{
		.i2c_ctrl = {
			.i2c_slv_id = 0x11, /* 7bit */
			.i2c_slv_mode = ATI_I2C_SLV_CTL_I2C_SLV_MODE_16_16,
		},
		setting_isp0,
		ARRAY_SIZE(setting_isp0),
	},
	/* FOR ISP1 */
	{
		.i2c_ctrl = {
			.i2c_slv_id = 0x12, /* 7bit */
			.i2c_slv_mode = ATI_I2C_SLV_CTL_I2C_SLV_MODE_16_16,
		},
		setting_isp0,
		ARRAY_SIZE(setting_isp0),
	},
	/* FOR ISP2 */
	{
		.i2c_ctrl = {
			.i2c_slv_id = 0x13, /* 7bit */
			.i2c_slv_mode = ATI_I2C_SLV_CTL_I2C_SLV_MODE_16_16,
		},
		setting_isp0,
		ARRAY_SIZE(setting_isp0),
	},
	/* FOR ISP3 */
	{
		.i2c_ctrl = {
			.i2c_slv_id = 0x14, /* 7bit */
			.i2c_slv_mode = ATI_I2C_SLV_CTL_I2C_SLV_MODE_16_16,
		},
		setting_isp0,
		ARRAY_SIZE(setting_isp0),
	},
};

#endif
