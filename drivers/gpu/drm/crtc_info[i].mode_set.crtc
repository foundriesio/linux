./tcc/tcc_drm_fbdev.c:404:        for (i = 0; i < fb_helper->crtc_count; i++)
./tcc/tcc_drm_fbdev.c:405:                if (fb_helper->crtc_info[i].mode_set.crtc == crtc)
./tcc/tcc_drm_fbdev.c:406:                        return &fb_helper->crtc_info[i];
./tcc/tcc_drm_fbdev.c:422:	for (i = 0; i < fb_helper->crtc_count; i++)
./tcc/tcc_drm_fbdev.c:423:                if (fb_helper->crtc_info[i].mode_set.crtc == crtc)
./tcc/tcc_drm_fbdev.c:425:        mutex_lock(&fb_helper->lock);
./tcc/tcc_drm_fbdev.c:440:        mutex_unlock(&fb_helper->lock);
./tcc/tcc_drm_fbdev.c:626:	if (fb_helper->fb && fb_helper->fb->funcs) {
./tcc/tcc_drm_fbdev.c:627:		fb = fb_helper->fb;
./drm_fb_helper.c:122:	lockdep_assert_held(&fb_helper->lock);
./drm_fb_helper.c:124:	count = fb_helper->connector_count + 1;
./drm_fb_helper.c:126:	if (count > fb_helper->connector_info_alloc_count) {
./drm_fb_helper.c:129:		temp = krealloc(fb_helper->connector_info, size, GFP_KERNEL);
./drm_fb_helper.c:133:		fb_helper->connector_info_alloc_count = count;
./drm_fb_helper.c:134:		fb_helper->connector_info = temp;
./drm_fb_helper.c:143:	fb_helper->connector_info[fb_helper->connector_count++] = fb_conn;
./drm_fb_helper.c:153:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:155:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:177:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:185:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:197:			fb_helper->connector_info[i];
./drm_fb_helper.c:202:		fb_helper->connector_info[i] = NULL;
./drm_fb_helper.c:204:	fb_helper->connector_count = 0;
./drm_fb_helper.c:207:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:222:	lockdep_assert_held(&fb_helper->lock);
./drm_fb_helper.c:225:		if (fb_helper->connector_info[i]->connector == connector)
./drm_fb_helper.c:229:	if (i == fb_helper->connector_count)
./drm_fb_helper.c:231:	fb_helper_connector = fb_helper->connector_info[i];
./drm_fb_helper.c:234:	for (j = i + 1; j < fb_helper->connector_count; j++)
./drm_fb_helper.c:235:		fb_helper->connector_info[j - 1] = fb_helper->connector_info[j];
./drm_fb_helper.c:237:	fb_helper->connector_count--;
./drm_fb_helper.c:248:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:250:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:352:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:393:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:394:		struct drm_mode_set *mode_set = &fb_helper->crtc_info[i].mode_set;
./drm_fb_helper.c:438:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:442:	drm_modeset_lock_all(fb_helper->dev);
./drm_fb_helper.c:453:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:454:		struct drm_mode_set *mode_set = &fb_helper->crtc_info[i].mode_set;
./drm_fb_helper.c:472:	drm_modeset_unlock_all(fb_helper->dev);
./drm_fb_helper.c:479:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:506:	if (READ_ONCE(fb_helper->deferred_setup))
./drm_fb_helper.c:509:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:512:	do_delayed = fb_helper->delayed_hotplug;
./drm_fb_helper.c:514:		fb_helper->delayed_hotplug = false;
./drm_fb_helper.c:515:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:526:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:541:		if (crtc->primary->fb == fb_helper->fb)
./drm_fb_helper.c:606:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:612:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:613:		crtc = fb_helper->crtc_info[i].mode_set.crtc;
./drm_fb_helper.c:620:			connector = fb_helper->connector_info[j]->connector;
./drm_fb_helper.c:636:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:638:		mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:642:	if (drm_drv_uses_atomic_modeset(fb_helper->dev))
./drm_fb_helper.c:646:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:804:	fb_helper->crtc_info = kcalloc(config->num_crtc, sizeof(struct drm_fb_helper_crtc), GFP_KERNEL);
./drm_fb_helper.c:805:	if (!fb_helper->crtc_info)
./drm_fb_helper.c:808:	fb_helper->crtc_count = config->num_crtc;
./drm_fb_helper.c:809:	fb_helper->connector_info = kcalloc(dev->mode_config.num_connector, sizeof(struct drm_fb_helper_connector *), GFP_KERNEL);
./drm_fb_helper.c:810:	if (!fb_helper->connector_info) {
./drm_fb_helper.c:811:		kfree(fb_helper->crtc_info);
./drm_fb_helper.c:814:	fb_helper->connector_info_alloc_count = dev->mode_config.num_connector;
./drm_fb_helper.c:815:	fb_helper->connector_count = 0;
./drm_fb_helper.c:817:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:818:		fb_helper->crtc_info[i].mode_set.connectors =
./drm_fb_helper.c:823:		if (!fb_helper->crtc_info[i].mode_set.connectors)
./drm_fb_helper.c:825:		fb_helper->crtc_info[i].mode_set.num_connectors = 0;
./drm_fb_helper.c:830:		fb_helper->crtc_info[i].mode_set.crtc = crtc;
./drm_fb_helper.c:856:	struct device *dev = fb_helper->dev->dev;
./drm_fb_helper.c:874:	fb_helper->fbdev = info;
./drm_fb_helper.c:896:	if (fb_helper && fb_helper->fbdev)
./drm_fb_helper.c:897:		unregister_framebuffer(fb_helper->fbdev);
./drm_fb_helper.c:915:	info = fb_helper->fbdev;
./drm_fb_helper.c:921:	fb_helper->fbdev = NULL;
./drm_fb_helper.c:923:	cancel_work_sync(&fb_helper->resume_work);
./drm_fb_helper.c:924:	cancel_work_sync(&fb_helper->dirty_work);
./drm_fb_helper.c:927:	if (!list_empty(&fb_helper->kernel_fb_list)) {
./drm_fb_helper.c:928:		list_del(&fb_helper->kernel_fb_list);
./drm_fb_helper.c:934:	mutex_destroy(&fb_helper->lock);
./drm_fb_helper.c:948:	if (fb_helper && fb_helper->fbdev)
./drm_fb_helper.c:949:		unlink_framebuffer(fb_helper->fbdev);
./drm_fb_helper.c:1152:	if (fb_helper && fb_helper->fbdev)
./drm_fb_helper.c:1153:		fb_set_suspend(fb_helper->fbdev, suspend);
./drm_fb_helper.c:1176:	if (!fb_helper || !fb_helper->fbdev)
./drm_fb_helper.c:1180:	flush_work(&fb_helper->resume_work);
./drm_fb_helper.c:1183:		if (fb_helper->fbdev->state != FBINFO_STATE_RUNNING)
./drm_fb_helper.c:1189:		if (fb_helper->fbdev->state == FBINFO_STATE_RUNNING)
./drm_fb_helper.c:1193:			schedule_work(&fb_helper->resume_work);
./drm_fb_helper.c:1198:	fb_set_suspend(fb_helper->fbdev, suspend);
./drm_fb_helper.c:1242:	drm_modeset_lock_all(fb_helper->dev);
./drm_fb_helper.c:1243:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1244:		crtc = fb_helper->crtc_info[i].mode_set.crtc;
./drm_fb_helper.c:1264:	drm_modeset_unlock_all(fb_helper->dev);
./drm_fb_helper.c:1315:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:1335:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1336:		crtc = fb_helper->crtc_info[i].mode_set.crtc;
./drm_fb_helper.c:1364:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1365:		crtc = fb_helper->crtc_info[i].mode_set.crtc;
./drm_fb_helper.c:1407:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:1416:	else if (drm_drv_uses_atomic_modeset(fb_helper->dev))
./drm_fb_helper.c:1422:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:1445:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:1469:		mode_set = &fb_helper->crtc_info[0].mode_set;
./drm_fb_helper.c:1490:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:1581:	struct drm_framebuffer *fb = fb_helper->fb;
./drm_fb_helper.c:1664:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1667:		mode_set = &fb_helper->crtc_info[i].mode_set;
./drm_fb_helper.c:1700:	drm_modeset_lock_all(fb_helper->dev);
./drm_fb_helper.c:1701:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1702:		modeset = &fb_helper->crtc_info[i].mode_set;
./drm_fb_helper.c:1715:	drm_modeset_unlock_all(fb_helper->dev);
./drm_fb_helper.c:1729:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:1735:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:1737:		mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:1745:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:1776:		struct drm_fb_helper_connector *fb_helper_conn = fb_helper->connector_info[i];
./drm_fb_helper.c:1806:	for (i = 0; i < fb_helper->crtc_count; i++) {
./drm_fb_helper.c:1816:		desired_mode = fb_helper->crtc_info[i].desired_mode;
./drm_fb_helper.c:1817:		mode_set = &fb_helper->crtc_info[i].mode_set;
./drm_fb_helper.c:1824:		x = fb_helper->crtc_info[i].x;
./drm_fb_helper.c:1825:		y = fb_helper->crtc_info[i].y;
./drm_fb_helper.c:1828:			gamma_size = fb_helper->crtc_info[i].mode_set.crtc->gamma_size;
./drm_fb_helper.c:1854:		if (!fb_helper->deferred_setup && !READ_ONCE(fb_helper->dev->master))
./drm_fb_helper.c:1864:	ret = (*fb_helper->funcs->fb_probe)(fb_helper, &sizes);
./drm_fb_helper.c:1919:	struct drm_framebuffer *fb = fb_helper->fb;
./drm_fb_helper.c:1921:	info->pseudo_palette = fb_helper->pseudo_palette;
./drm_fb_helper.c:1945:		connector = fb_helper->connector_info[i]->connector;
./drm_fb_helper.c:2044:		connector = fb_helper->connector_info[i]->connector;
./drm_fb_helper.c:2055:		connector = fb_helper->connector_info[i]->connector;
./drm_fb_helper.c:2071:	if (fb_helper->crtc_count > 1)
./drm_fb_helper.c:2089:		fb_helper_conn = fb_helper->connector_info[i];
./drm_fb_helper.c:2110:	dmt_mode = drm_mode_find_dmt(fb_helper->dev, 1024, 768, 60, false);
./drm_fb_helper.c:2116:		fb_helper_conn = fb_helper->connector_info[i];
./drm_fb_helper.c:2144:		fb_helper_conn = fb_helper->connector_info[i];
./drm_fb_helper.c:2171:	const u64 mask = BIT_ULL(fb_helper->connector_count) - 1;
./drm_fb_helper.c:2178:		fb_helper_conn = fb_helper->connector_info[i];
./drm_fb_helper.c:2250:	if (n == fb_helper->connector_count)
./drm_fb_helper.c:2253:	fb_helper_conn = fb_helper->connector_info[n];
./drm_fb_helper.c:2261:	crtcs = kzalloc(fb_helper->connector_count *
./drm_fb_helper.c:2281:	if (drm_drv_uses_atomic_modeset(fb_helper->dev) &&
./drm_fb_helper.c:2294:	for (c = 0; c < fb_helper->crtc_count; c++) {
./drm_fb_helper.c:2295:		crtc = &fb_helper->crtc_info[c];
./drm_fb_helper.c:2306:			if (fb_helper->crtc_count > 1)
./drm_fb_helper.c:2320:			       fb_helper->connector_count *
./drm_fb_helper.c:2332:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:2341:	lockdep_assert_held(&fb_helper->lock);
./drm_fb_helper.c:2343:	crtcs = kcalloc(fb_helper->connector_count,
./drm_fb_helper.c:2345:	modes = kcalloc(fb_helper->connector_count,
./drm_fb_helper.c:2347:	offsets = kcalloc(fb_helper->connector_count,
./drm_fb_helper.c:2349:	enabled = kcalloc(fb_helper->connector_count,
./drm_fb_helper.c:2356:	mutex_lock(&fb_helper->dev->mode_config.mutex);
./drm_fb_helper.c:2361:	if (!(fb_helper->funcs->initial_config &&
./drm_fb_helper.c:2362:	      fb_helper->funcs->initial_config(fb_helper, crtcs, modes,
./drm_fb_helper.c:2365:		memset(modes, 0, fb_helper->connector_count*sizeof(modes[0]));
./drm_fb_helper.c:2366:		memset(crtcs, 0, fb_helper->connector_count*sizeof(crtcs[0]));
./drm_fb_helper.c:2367:		memset(offsets, 0, fb_helper->connector_count*sizeof(offsets[0]));
./drm_fb_helper.c:2380:	mutex_unlock(&fb_helper->dev->mode_config.mutex);
./drm_fb_helper.c:2384:	for (i = 0; i < fb_helper->crtc_count; i++)
./drm_fb_helper.c:2386:					      &fb_helper->crtc_info[i].mode_set);
./drm_fb_helper.c:2396:				fb_helper->connector_info[i]->connector;
./drm_fb_helper.c:2422: * the framebuffer has been allocated (fb_helper->fb and fb_helper->fbdev).
./drm_fb_helper.c:2428:	struct fb_info *info = fb_helper->fbdev;
./drm_fb_helper.c:2431:	for (i = 0; i < fb_helper->crtc_count; i++)
./drm_fb_helper.c:2432:		if (fb_helper->crtc_info[i].mode_set.num_connectors)
./drm_fb_helper.c:2433:			fb_helper->crtc_info[i].mode_set.fb = fb_helper->fb;
./drm_fb_helper.c:2435:	mutex_lock(&fb_helper->dev->mode_config.mutex);
./drm_fb_helper.c:2438:					fb_helper->connector_info[i]->connector;
./drm_fb_helper.c:2447:	mutex_unlock(&fb_helper->dev->mode_config.mutex);
./drm_fb_helper.c:2450:/* Note: Drops fb_helper->lock before returning. */
./drm_fb_helper.c:2455:	struct drm_device *dev = fb_helper->dev;
./drm_fb_helper.c:2467:			fb_helper->preferred_bpp = bpp_sel;
./drm_fb_helper.c:2468:			fb_helper->deferred_setup = true;
./drm_fb_helper.c:2471:		mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:2477:	fb_helper->deferred_setup = false;
./drm_fb_helper.c:2479:	info = fb_helper->fbdev;
./drm_fb_helper.c:2485:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:2498:	list_add(&fb_helper->kernel_fb_list, &kernel_fb_helper_list);
./drm_fb_helper.c:2553:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:2588:	mutex_lock(&fb_helper->lock);
./drm_fb_helper.c:2589:	if (fb_helper->deferred_setup) {
./drm_fb_helper.c:2591:				fb_helper->preferred_bpp);
./drm_fb_helper.c:2595:	if (!fb_helper->fb || !drm_fb_helper_is_bound(fb_helper)) {
./drm_fb_helper.c:2596:		fb_helper->delayed_hotplug = true;
./drm_fb_helper.c:2597:		mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:2603:	drm_setup_crtcs(fb_helper, fb_helper->fb->width, fb_helper->fb->height);
./drm_fb_helper.c:2605:	mutex_unlock(&fb_helper->lock);
./drm_fb_helper.c:2607:	drm_fb_helper_set_par(fb_helper->fbdev);
./i915/intel_fbdev.c:288:	for (i = 0; i < fb_helper->crtc_count; i++)
./i915/intel_fbdev.c:289:		if (fb_helper->crtc_info[i].mode_set.crtc == crtc)
./i915/intel_fbdev.c:290:			return &fb_helper->crtc_info[i];
./i915/intel_fbdev.c:328:	struct drm_i915_private *dev_priv = to_i915(fb_helper->dev);
./i915/intel_fbdev.c:330:	unsigned int count = min(fb_helper->connector_count, BITS_PER_LONG);
./i915/intel_fbdev.c:344:	while (drm_modeset_lock_all_ctx(fb_helper->dev, &ctx) != 0)
./i915/intel_fbdev.c:358:		fb_conn = fb_helper->connector_info[i];
./exynos/exynos_drm_fbdev.c:247:	if (fb_helper->fb && fb_helper->fb->funcs) {
./exynos/exynos_drm_fbdev.c:248:		fb = fb_helper->fb;
